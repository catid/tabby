CAT_INLINE void u128_set(u128 &r, const u64 x)
{
	r = x;
}

CAT_INLINE void u128_set(u128 &r, const u64 low, const u64 high)
{
	r = ((u128)high << 64) | low;
}

CAT_INLINE u128 u128_sum(const u64 x, const u64 y)
{
	return (u128)x + y;
}

CAT_INLINE u128 u128_sum(const u128 x, const u64 y)
{
	return x + y;
}

CAT_INLINE u128 u128_sum(const u128 x, const u128 y)
{
	return x + y;
}

CAT_INLINE u128 u128_diff(const u64 x, const u64 y)
{
	return (s128)x - y;
}

CAT_INLINE u128 u128_diff(const u128 x, const u64 y)
{
	return x - y;
}

CAT_INLINE u128 u128_diff(const u128 x, const u128 y)
{
	return x - y;
}

CAT_INLINE void u128_add(u128 &r, const u128 x)
{
	r += x;
}

CAT_INLINE void u128_add(u128 &r, const u64 x)
{
	r += x;
}

CAT_INLINE u128 u128_not(const u128 x)
{
	return ~x;
}

CAT_INLINE void u128_or(u128 &r, const u64 x)
{
	r |= x;
}

CAT_INLINE u128 u128_and(const u128 x, const u128 y)
{
	return x & y;
}

CAT_INLINE void u128_set_bit(u128 &r, int x)
{
	r |= (u128)1 << x;
}

CAT_INLINE u32 u128_get_bits(const u128 x, int offset)
{
	return (u32)(x >> offset);
}

CAT_INLINE void u128_carry_add(u128 &r, const u64 x)
{
	r = (u128)x + (u64)(r >> 64);
}

CAT_INLINE void u128_borrow_add(u128 &r, const u64 x)
{
	r = ((s128)r >> 64) + x;
}

CAT_INLINE u128 u128_neg(const u128 x)
{
	return -(s128)x;
}

CAT_INLINE void u128_sub(u128 &r, const u128 x)
{
	r = (s128)r - x;
}

CAT_INLINE void u128_sub(u128 &r, const u64 x)
{
	r = (s128)r - x;
}

CAT_INLINE void u128_rshift(u128 &r, int shift)
{
	r >>= shift;
}

CAT_INLINE void u128_lshift(u128 &r, int shift)
{
	r <<= shift;
}

CAT_INLINE u128 u128_prod(const u64 x, const u64 y)
{
	return (u128)x * y;
}

CAT_INLINE u128 u128_prod_sum(const u64 x, const u64 y, const u64 z)
{
	return (u128)x * y + z;
}

CAT_INLINE u128 u128_prod_63_sum(const u64 x, const u64 y, const u64 z)
{
	return (u128)x * y + z;
}

CAT_INLINE u128 u128_lshift_sum(const u64 x, int shift, const u64 z)
{
	return ((u128)x << shift) + z;
}

CAT_INLINE u64 u128_high(const u128 x)
{
	return (u64)(x >> 64);
}

CAT_INLINE u64 u128_low(const u128 x)
{
	return (u64)x;
}

CAT_INLINE bool u128_is_neg(const u128 x)
{
	return (s128)x < 0;
}

CAT_INLINE void u128_clear_msb(u128 &r)
{
	r &= 0x7fffffffffffffffULL;
}

