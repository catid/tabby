/*
	Copyright (c) 2013 Christopher A. Taylor.  All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	* Redistributions of source code must retain the above copyright notice,
	  this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright notice,
	  this list of conditions and the following disclaimer in the documentation
	  and/or other materials provided with the distribution.
	* Neither the name of Tabby nor the names of its contributors may be
	  used to endorse or promote products derived from this software without
	  specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/

typedef struct {
	// Key/nonce generator
	cymric_rng rng;

	// Secret key used consistently during signing
	// It is important that this key is never changed,
	// or else the signatures can leak the private key.
	char sign_key[32];

	// Generated/loaded private key
	char private_key[32];

	// Corresponding public key, always regenerated from
	// the private key to avoid validation and to cut
	// down on the offline storage.
	char public_key[64];

	// Private ephemeral key, used for forward secrecy,
	// which should be periodically rekeyed.
	char private_ephemeral[32];

	// Its corresponding public ephemeral key
	char public_ephemeral[64];

	// Flag indicating initialization for error checking
	u32 flag;

	// Rekey thread data:

	// New ephemeral key generated by rekeying.
	// This key will get copied over to private_ephemeral
	// next time a client connects to the server.
	char private_rekey[32];

	// New corresponding public key generated by rekeying
	char public_rekey[64];

	// New RNG state after reseeding the generator.
	// This RNG state will get copied over the main RNG
	// next time a client connects to the server.
	cymric_rng rng_rekey;

	// Flag to indicate whether rekeying is requested or
	// completed.  When rekeying is not requested, it is
	// okay to do nothing and have the thread go back to
	// sleep.  The problem is that the ephemeral secret
	// is not erased from memory until the next time a
	// client connects, which is not ideal.
	volatile u32 flag_rekey;
} server_internal;

// Valid rekey flag values
static const u32 FLAG_NEED_REKEY = 1;	// Requesting a rekey
static const u32 FLAG_REKEY_DONE = 2;	// Done with rekey

#ifdef __cplusplus
extern "C" {
#endif

int tabby_server_gen(tabby_server *S, const void *seed, int seed_bytes) {
	server_internal *state = (server_internal *)S;

	// Input validation
	if CAT_UNLIKELY(!S) {
		return -1;
	}

	// Reseed the generator
	if CAT_UNLIKELY(cymric_seed(&state->rng, seed, seed_bytes)) {
		return -1;
	}

	// Generate the long-term key pair
	if CAT_UNLIKELY(generate_key(&state->rng, state->private_key, state->public_key)) {
		return -1;
	}

	// Generate the long-term signing key
	if CAT_UNLIKELY(cymric_random(&state->rng, state->sign_key, 32)) {
		return -1;
	}

	// Generate the ephemeral key pair
	if CAT_UNLIKELY(generate_key(&state->rng, state->private_ephemeral, state->public_ephemeral)) {
		return -1;
	}

	// Flag as initialized for sanity checking later
	state->flag = FLAG_INIT;

	// Flag as needing a rekey
	state->flag_rekey = FLAG_NEED_REKEY;

	return 0;
}

int tabby_server_get_public_key(tabby_server *S, char public_key[64]) {
	server_internal *state = (server_internal *)S;

	// Validate input and make sure the server object was initialized
	if CAT_UNLIKELY(!S || !public_key || state->flag != FLAG_INIT) {
		return -1;
	}

	// Copy out the public key
	memcpy(public_key, state->public_key, 64);

	return 0;
}

int tabby_server_save_secret(tabby_server *S, char server_data[64]) {
	server_internal *state = (server_internal *)S;

	// Validate input and make sure the server object was initialized
	if CAT_UNLIKELY(!S || !server_data || state->flag != FLAG_INIT) {
		return -1;
	}

	// Copy out the private and sign keys, which need to
	// persist between server runs.  The public key can
	// be trivially derived during loading, which avoids
	// the potential for corruption at least for that.
	memcpy(server_data, state->private_key, 32);
	memcpy(server_data + 32, state->sign_key, 32);

	return 0;
}

int tabby_server_load_secret(tabby_server *S, const void *seed, int seed_bytes, const char server_data[64]) {
	server_internal *state = (server_internal *)S;

	// Validate input
	if CAT_UNLIKELY(!S || !server_data) {
		return -1;
	}

	// Copy the private and sign keys into the target location
	memcpy(state->private_key, server_data, 32);
	memcpy(state->sign_key, server_data + 32, 32);

	// Regenerate the public key from the private key
	if CAT_UNLIKELY(snowshoe_mul_gen(state->private_key, state->public_key, 0)) {
		return -1;
	}

	// Reseed the Cymric RNG for generating nonces and ephemeral key pairs
	if CAT_UNLIKELY(cymric_seed(&state->rng, seed, seed_bytes)) {
		return -1;
	}

	// Generate the server's ephemeral key pair
	if CAT_UNLIKELY(generate_key(&state->rng, state->private_ephemeral, state->public_ephemeral)) {
		return -1;
	}

	// Flag the object as being initialized for sanity checking later
	state->flag = FLAG_INIT;

	// Flag that we want a rekey initially
	state->flag_rekey = FLAG_NEED_REKEY;

	return 0;
}

int tabby_server_rekey(tabby_server *S, const void *seed, int seed_bytes) {
	server_internal *state = (server_internal *)S;

	// If library is not initialized,
	if CAT_UNLIKELY(!m_initialized) {
		return -1;
	}

	// If server object is not initialized,
	if CAT_UNLIKELY(state->flag != FLAG_INIT) {
		return -1;
	}

	// If a new key is requested,
	if (state->flag_rekey == FLAG_NEED_REKEY) {
		CAT_FENCE_COMPILER; // Prevents compiler re-ordering instructions

		// Copy RNG state
		memcpy(&state->rng_rekey, &state->rng, sizeof(state->rng_rekey));

		// Seed new RNG
		if CAT_UNLIKELY(cymric_seed(&state->rng_rekey, seed, seed_bytes)) {
			return -1;
		}

		// Generate ephemeral key pair
		if CAT_UNLIKELY(generate_key(&state->rng_rekey, state->private_rekey, state->public_rekey)) {
			return -1;
		}

		CAT_FENCE_COMPILER; // Prevents compiler re-ordering instructions

		// Flag rekey complete
		state->flag_rekey = FLAG_REKEY_DONE;
	}

	return 0;
}

int tabby_server_handshake(tabby_server *S, const char client_request[96], char server_response[128], char secret_key[32]) {
	server_internal *state = (server_internal *)S;

	// If library is not initialized,
	if CAT_UNLIKELY(!m_initialized) {
		return -1;
	}

	// If input is invalid or server object is uninitialized,
	if CAT_UNLIKELY(!state || !client_request || !server_response ||
		!secret_key || state->flag != FLAG_INIT) {
		return -1;
	}

	// If rekeying is complete,
	if (state->flag_rekey == FLAG_REKEY_DONE) {
		CAT_FENCE_COMPILER; // Prevents compiler from re-ordering instructions

		// Copy over the generated ephemeral key pair
		memcpy(state->private_ephemeral, state->private_rekey, 32);
		memcpy(state->public_ephemeral, state->public_rekey, 64);

		// Copy over the new RNG state
		memcpy(&state->rng, &state->rng_rekey, sizeof(state->rng));

		CAT_FENCE_COMPILER; // Prevents compiler from re-ordering instructions

		// Allow thread to rekey again
		state->flag_rekey = FLAG_NEED_REKEY;
	}

	// Allocate overlapping stack objects to make erasing easier
	char T[64+64+32];
	char *H = T + 64;
	char *h = T + 64+64;
	char *e = h;
	char *k = T;
	char *nonce = server_response + 64;
	const char *client_public = client_request;
	const char *client_nonce = client_request + 64;
	blake2b_state B;

	do {
		do {
			// Generate server nonce SN
			if CAT_UNLIKELY(cymric_random(&state->rng, nonce, 32)) {
				return -1;
			}

			// H = BLAKE2(CP, CN, EP, SP, SN)
			if CAT_UNLIKELY(blake2b_init(&B, 64)) {
				return -1;
			}
			if CAT_UNLIKELY(blake2b_update(&B, (const u8 *)client_public, 64)) {
				return -1;
			}
			if CAT_UNLIKELY(blake2b_update(&B, (const u8 *)client_nonce, 32)) {
				return -1;
			}
			if CAT_UNLIKELY(blake2b_update(&B, (const u8 *)state->public_ephemeral, 64)) {
				return -1;
			}
			if CAT_UNLIKELY(blake2b_update(&B, (const u8 *)state->public_key, 64)) {
				return -1;
			}
			if CAT_UNLIKELY(blake2b_update(&B, (const u8 *)nonce, 32)) {
				return -1;
			}
			if CAT_UNLIKELY(blake2b_final(&B, (u8 *)H, 64)) {
				return -1;
			}

			// h = H mod q
			snowshoe_mod_q(H, h);

			// If h == 0, choose a new SN and start over.
		} while CAT_UNLIKELY(is_zero(h));

		// e = h * SS + ES (mod q)
		snowshoe_mul_mod_q(h, state->private_key, state->private_ephemeral, e);

		// T = e * SP
		// If e is zero, select a new nonce and try again.  This check is performed
		// in constant-time by snowshoe_mul.
	} while CAT_UNLIKELY(snowshoe_mul(e, client_public, T));

	// Hash the secret point T with the public information hash H to arrive at
	// the session secret key k.

	// k = BLAKE2(T, H)
	if CAT_UNLIKELY(blake2b_init(&B, 64)) {
		return -1;
	}
	if CAT_UNLIKELY(blake2b_update(&B, (const u8 *)T, 128)) {
		return -1;
	}
	if CAT_UNLIKELY(blake2b_final(&B, (u8 *)k, 64)) {
		return -1;
	}

	// Secret key = low 32 bytes of k
	memcpy(secret_key, k, 32);

	// Write server ephemeral public key
	memcpy(server_response, state->public_ephemeral, 64);

	// PROOF = high 32 bytes of k
	memcpy(server_response + 32 + 64, k + 32, 32);

	CAT_SECURE_OBJCLR(T);
	CAT_SECURE_OBJCLR(B);

	return 0;
}

#ifdef __cplusplus
}
#endif

